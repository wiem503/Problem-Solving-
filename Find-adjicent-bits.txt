*\Task
You are given a 32-bit integer n. Swap each pair of adjacent bits in its binary representation and return the result as a decimal number.

The potential leading zeroes of the binary representations have to be taken into account, e.g. 0b100 as a 32-bit integer is 0b00000000000000000000000000000100 and is reversed to 0b1000.

Examples
For n = 13, the output should be 14:

1310 = 11012 --> 11102 = 1410

For n = 74, the output should be 133:

7410 = 010010102 --> 100001012 = 13310

Input/Output
[input] integer n
[output] an integer*/
#include <inttypes.h>

uint32_t swap_adjacent_bits (uint32_t n)
{
  uint32_t res = 0;
  for (uint32_t i = 0; i < 32; i += 2){
    uint32_t right = n & (1 << i);
    uint32_t left = n & (1 << (i+1));
    res |= (left >> 1) | (right << 1);
  }
  return res;

  return 0;
}